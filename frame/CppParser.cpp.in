//..............................................................................
//
//  This file is part of the Graco toolkit.
//
//  Graco is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/graco/license.txt
//
//..............................................................................

%{ dofile (FrameDir .. "/CppParserUtils.lua") }

$CppIncludes

#if (_AXL_CPP_MSC)
#	pragma warning (disable: 4065) // warning C4065: switch statement contains 'default' but no 'case' labels
#endif

$OpenNamespace

//..............................................................................

size_t*
$ParserClassName::getParseTable ()
{
	static
	size_t _ParseTable [] =
	{
		%{
			for i = 1, SymbolCount do
				Row = ParseTable [i]
				for j = 1, TokenCount do
					emit (Row [j], ", ")
				end }
		%{ end }
		-1
	};

	return _ParseTable;
}

size_t*
$ParserClassName::getSequence (size_t Index)
{
	static
	size_t _SequenceTable [] =
	{
		%{
			for i = 1, SequenceCount do
				Sequence = SequenceTable [i].Sequence
				for j = #Sequence, 1, -1 do
					emit (Sequence [j], ", ")
				end } -1, // $(i - 1)
		%{ end }
		-1
	};

	static
	size_t _SequenceIndexTable [] =
	{
		%{
			j = 0;
			for i = 1, SequenceCount do
				Sequence = SequenceTable [i].Sequence
				emit (j, ", ")
				j = j + #Sequence + 1 -- to account left side & terminating -1
			end
		}
		-1
	};

	ASSERT (Index < SequenceCount);
	return _SequenceTable + _SequenceIndexTable [Index];
}

size_t
$ParserClassName::getTokenIndex (int Token)
{
	switch (Token)
	{
	case 0:
		return EofToken;

	%{
		for i = 3, TokenCount do
			Token = TokenTable [i]
			TokenString = GetTokenString (Token)
	}
	case $TokenString:
		return $(i - 1);
	%{ end }
	default:
		return AnyToken;
	}
}

int
$ParserClassName::getTokenFromIndex (size_t Index)
{
	static
	const int _TokenTable [] =
	{
		0,  // eof
		0,  // any token
		%{
		for i = 3, TokenCount do
			Token = TokenTable [i]
			TokenString = GetTokenString (Token)
			emit (TokenString, ", ")
		}
		%{end}
		0
	};

	ASSERT (Index < TokenCount);
	return _TokenTable [Index];
}

const char*
$ParserClassName::getSymbolName (size_t Index)
{
	static
	const char* _SymbolNameTable [NamedSymbolCount] =
	{
		%{
		for i = 1, NamedSymbolCount do
			Symbol = SymbolTable [i]
		}"$(Symbol.Name)",
		%{end}
	};

	ASSERT (Index < NamedSymbolCount);
	return _SymbolNameTable [Index];
}

$ParserClassName::SymbolNode*
$ParserClassName::createSymbolNode (size_t Index)
{
	SymbolNode* pNode;

	switch (Index)
	{
	%{
	for i = 1, NamedSymbolCount do
		Symbol = SymbolTable [i]
		if Symbol.IsCustom then
	}
	case SymbolKind_$(Symbol.Name):
		pNode = AXL_MEM_NEW (SymbolNode_$(Symbol.Name));
		%{	if Symbol.Class then }
		pNode->m_astNode = AXL_MEM_NEW ($(Symbol.Class));
		%{ elseif not Symbol.IsNoAst then }
		pNode->m_astNode = AXL_MEM_NEW (AstNode);
		%{ end }
		break;
		%{ elseif Symbol.Enter or Symbol.Leave or Symbol.Class or Symbol.IsNoAst then }
	case SymbolKind_$(Symbol.Name):
		pNode = createStdSymbolNode (Index);
		pNode->m_flags |= llk::SymbolNodeFlag_Named;
			%{ if Symbol.Enter then }
		pNode->m_flags |= llk::SymbolNodeFlag_HasEnter;
			%{ end
				if Symbol.Leave then }
		pNode->m_flags |= llk::SymbolNodeFlag_HasLeave;
			%{ end
				if Symbol.Class then }
		pNode->m_astNode = AXL_MEM_NEW ($(Symbol.Class));
			%{ elseif not Symbol.IsNoAst then }
		pNode->m_astNode = AXL_MEM_NEW (AstNode);
			%{ end }
		break;
		%{ end }
	%{ end }
	default:
		pNode = createStdSymbolNode (Index);
		pNode->m_astNode = AXL_MEM_NEW (AstNode);
	};

	if (pNode->m_astNode)
		pNode->m_astNode->m_kind = (int) Index;

	return pNode;
}

size_t*
$ParserClassName::getBeacon (size_t Index)
{
	static
	size_t _BeaconTable [] [2] =
	{
		%{
			for i = 1, BeaconCount do
				local Beacon = BeaconTable [i]
		}
		{ $(Beacon.Slot), $(Beacon.Target) },
		%{ end }
		{ 0 }
	};

	ASSERT (Index < BeaconCount);
	return _BeaconTable [Index];
}

bool
$ParserClassName::action (size_t Index)
{
	switch (Index)
	{
	%{
		for i = 1, ActionCount do
			Action = ActionTable [i]
			ProductionSymbol = Action.ProductionSymbol;
	}
	case $(i - 1):
		{
		$(GetSymbolDeclaration (ProductionSymbol, SymbolVariableName, "getSymbolTop ()"))
		$(GetAstDeclaration (ProductionSymbol, AstNodeVariableName, SymbolVariableName))
$PpLinePrefix #line $(GetPpLine (Action.SrcPos.FilePath, Action.SrcPos.Line))
		$(ProcessActionUserCode (Action.UserCode, Action.Dispatcher, SymbolVariableName, AstNodeVariableName));
$PpLinePrefix #line $(GetPpLineDefault ())
		}

		return true;
	%{ end }
	default:
		ASSERT (false);
		return true;
	}
}

void
$ParserClassName::argument (
	size_t Index,
	SymbolNode* pSymbol
	)
{
	switch (Index)
	{
	%{
		for i = 1, ArgumentCount do
			Argument = ArgumentTable [i]
			TargetSymbol = Argument.TargetSymbol
			ProductionSymbol = Argument.ProductionSymbol
			ValueTable = Argument.ValueTable
		}
	case $(i - 1):
		{
		$(GetSymbolDeclaration (TargetSymbol, "__pTarget", "pSymbol"))
		$(GetSymbolDeclaration (ProductionSymbol, SymbolVariableName, "getSymbolTop ()"))
		$(GetAstDeclaration (ProductionSymbol, AstNodeVariableName, SymbolVariableName))
		%{ for j = 1, #ValueTable do
			ArgumentName = TargetSymbol.ArgNameTable [j]
			ArgumentValue = ProcessActionUserCode (ValueTable [j], Argument.Dispatcher, SymbolVariableName, AstNodeVariableName)
			}
$PpLinePrefix #line $(GetPpLine (Argument.SrcPos.FilePath, Argument.SrcPos.Line))
		__pTarget->m_arg.$ArgumentName = $ArgumentValue;
$PpLinePrefix #line $(GetPpLineDefault ())
		%{ end }
		}
		break;
	%{ end }
	default:
		ASSERT (false);
	}
}

bool
$ParserClassName::enter (size_t Index)
{
	switch (Index)
	{
	%{
	for i = 1, NamedSymbolCount do
		Symbol = SymbolTable [i]
		if (Symbol.Enter) then }
	case SymbolKind_$(Symbol.Name):
		{
			$(GetSymbolDeclaration (Symbol, SymbolVariableName, "getSymbolTop ()"))
			$(GetAstDeclaration (Symbol, AstNodeVariableName, SymbolVariableName))
$PpLinePrefix #line $(GetPpLine (Symbol.SrcPos.FilePath, Symbol.EnterLine))
			$(ProcessActionUserCode (Symbol.Enter, nil, SymbolVariableName, AstNodeVariableName));
$PpLinePrefix #line $(GetPpLineDefault ())
		}
		return true;
		%{ end }
	%{ end }
	default:
		return true;
	}
}

bool
$ParserClassName::leave (size_t Index)
{
	switch (Index)
	{
	%{
	for i = 1, NamedSymbolCount do
		Symbol = SymbolTable [i]
		if (Symbol.Leave) then }
	case SymbolKind_$(Symbol.Name):
		{
			$(GetSymbolDeclaration (Symbol, SymbolVariableName, "getSymbolTop ()"))
			$(GetAstDeclaration (Symbol, AstNodeVariableName, SymbolVariableName))
$PpLinePrefix #line $(GetPpLine (Symbol.SrcPos.FilePath, Symbol.LeaveLine))
			$(ProcessActionUserCode (Symbol.Leave, nil, SymbolVariableName, AstNodeVariableName));
$PpLinePrefix #line $(GetPpLineDefault ())
		}
		return true;
		%{ end }
	%{ end }
	default:
		return true;
	}
}

$ParserClassName::LaDfaResult
$ParserClassName::laDfa (
	size_t Index,
	int LookaheadToken,
	LaDfaTransition* pTransition
	)
{
	switch (Index)
	{
	%{ for i = 1, LaDfaCount do
			DfaNode = LaDfaTable [i]	}
	case $(i - 1):
		%{ if DfaNode.Resolver then }
		pTransition->m_productionIndex = $(DfaNode.Production);
		pTransition->m_resolverIndex = $(DfaNode.Resolver);
		pTransition->m_resolverElseIndex = $(DfaNode.ResolverElse);
			%{ if DfaNode.HasChainedResolver then }
		pTransition->m_flags = llk::LaDfaNodeFlag_HasChainedResolver;
			%{ end }
		return LaDfaResult_Resolver;
		%{ else }
		switch (LookaheadToken)
		{
		%{ TransitionTable = DfaNode.TransitionTable
			for j = 1, #TransitionTable do
				local Transition = TransitionTable [j]
				local TokenString = GetTokenString (Transition.Token) }
		case $TokenString:
				%{ if (Transition.Resolver) then }
			pTransition->m_productionIndex = $(Transition.Production);
			pTransition->m_resolverIndex = $(Transition.Resolver);
			pTransition->m_resolverElseIndex = $(Transition.ResolverElse);
					%{ if Transition.HasChainedResolver then }
			pTransition->m_flags = llk::LaDfaNodeFlag_HasChainedResolver;
					%{ end }
			return LaDfaResult_Resolver;
				%{ else }
			pTransition->m_productionIndex = $(Transition.Production);
			return LaDfaResult_Production;
				%{ end	}
		%{ end }
		default:
				%{ if (DfaNode.DefaultProduction) then }
			pTransition->m_productionIndex = $(DfaNode.DefaultProduction);
			return LaDfaResult_Production;
				%{ else }
			return LaDfaResult_Fail;
				%{ end	}
		}
		%{ end }
	%{ end }
	default:
		return LaDfaResult_Fail;
	}
}

//..............................................................................

$CloseNamespace
