//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

// root

class
{
	NamedType* m_type;
}
named_type_specifier
	leave
	{
		if (m_stage == Stage_Pass2)
			return $.m_type->ensureLayout ();
	}
	:	enum_specifier
			{
				$.m_type = $1.m_type;
			}
	|	struct_specifier
			{
				$.m_type = $1.m_type;
			}
	|	union_specifier
			{
				$.m_type = $1.m_type;
			}
	|	class_specifier
			{
				$.m_type = $1.m_type;
			}
	|	library_specifier
			{
				$.m_type = $1.m_type;
			}
	;

start
named_type_specifier_save_type
	:	named_type_specifier
			{
				m_namedType = $1.m_type;
			}
	;

//..............................................................................

// enum

class
{
	EnumType* m_type;
	uint_t m_flags;
}
enum_specifier
	enter
	{
		m_flags = 0;
	}
	leave
	{
		if ($.m_type->getName ().isEmpty () || ($.m_type->getFlags () & EnumTypeFlag_Exposed))
			return m_module->m_namespaceMgr.getCurrentNamespace ()->exposeEnumConsts ($.m_type);
	}
	:	enum_modifier <&$.m_flags>*
		TokenKind_Enum
		TokenKind_Identifier $n?
		(':' type_name $b)?
			{
				$.m_type = createEnumType (
					&$n ? $n.m_data.m_string : sl::String (),
					&$b ? $b.m_type : NULL,
					$.m_flags
					);

				if (!$.m_type)
					return false;
			}
		enum_block <$.m_type>
	;

enum_modifier <uint_t* $flags>
	:	TokenKind_Exposed
			{
				return addEnumFlag ($flags, EnumTypeFlag_Exposed);
			}
	|	TokenKind_BitFlag
			{
				return addEnumFlag ($flags, EnumTypeFlag_BitFlag);
			}
	;

enum_block <EnumType* $type>
	:	'{'
			{
				m_module->m_namespaceMgr.openNamespace ($type);
			}
		enum_member <$type> (',' enum_member <$type>)*
		'}'
			{
				m_module->m_namespaceMgr.closeNamespace ();
			}
	;

nullable
enum_member <EnumType* $type>
	:	TokenKind_Identifier ('=' expression_pass1 $i)?
			{
				return createEnumConst ($type, $1.m_data.m_string, $1.m_pos, &$i ? &$i.m_tokenList : NULL) != NULL;
			}
	|	epsilon
	;

//..............................................................................

// struct

class
{
	StructType* m_type;
}
struct_specifier
	leave
	{
		if ($.m_type->getName ().isEmpty ())
			return declareUnnamedStructOrUnion ($.m_type);
	}
	:	TokenKind_Struct
		TokenKind_Identifier $n?
		(':' type_name_list $b)?
			{
				$.m_type = createStructType (
					&$n ? $n.m_data.m_string : sl::String (),
					&$b ? &$b.m_typeList : NULL,
					m_fieldAlignment
					);

				if (!$.m_type)
					return false;
			}
		named_type_block <$.m_type>
	;

//..............................................................................

// union

class
{
	UnionType* m_type;
}
union_specifier
	leave
	{
		if ($.m_type->getName ().isEmpty ())
			return declareUnnamedStructOrUnion ($.m_type);
	}
	:	TokenKind_Union
		TokenKind_Identifier $n?
			{
				$.m_type = createUnionType (
					&$n ? $n.m_data.m_string : sl::String (),
					m_fieldAlignment
					);

				if (!$.m_type)
					return false;
			}
		named_type_block <$.m_type>
	;

//..............................................................................

// class

class
{
	ClassType* m_type;
}
class_specifier
	:	resolver (TokenKind_Opaque? TokenKind_Class TokenKind_Identifier)
		TokenKind_Opaque $o?
		TokenKind_Class
		TokenKind_Identifier $n
		(':' type_name_list $b)?
			{
				$.m_type = createClassType (
					$n.m_data.m_string,
					&$b ? &$b.m_typeList : NULL,
					m_fieldAlignment,
					&$o ? ClassTypeFlag_Opaque : 0
					);

				if (!$.m_type)
					return false;
			}
		named_type_block <$.m_type>
	;

//..............................................................................

// class

class
{
	ClassType* m_type;
}
library_specifier
	:	TokenKind_DynamicLib TokenKind_Identifier
			{
				$.m_type = createDynamicLibType ($2.m_data.m_string);

				if (!$.m_type)
					return false;
			}
		'{' named_type_block_declaration* '}'
			{
				return finalizeDynamicLibType ();
			}
	;

//..............................................................................

// struct, union, class, property

named_type_block <NamedType* $type>
	enter
	{
		m_module->m_namespaceMgr.openNamespace ($type);
	}
	leave
	{
		$type->m_flags |= ModuleItemFlag_Sealed;
		m_module->m_namespaceMgr.closeNamespace ();
	}
	:	named_type_block_impl
	;

start
named_type_block_impl
	:	'{' named_type_block_declaration* '}'
	;

//..............................................................................
