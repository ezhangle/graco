//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

// root declaration productions

global_declaration
	:	import_declaration
	|	namespace_declaration
	|	extension_declaration
	|	using_declaration
	|	friend_declaration
	|	access_declaration
	|   alignment_declaration
	|	normal_item_declaration
	|	named_type_specifier
	|	';'
	;

named_type_block_declaration
	:	friend_declaration
	|	access_declaration
	|   alignment_declaration
	|   setas_declaration
	|	normal_item_declaration
	|	named_type_specifier
	|	';'
	;

local_declaration
	enter
	{
		m_module->m_namespaceMgr.setSourcePos (m_currentToken.m_pos);
	}
	:	statement
	|	using_declaration
	|   alignment_declaration
	|	local_item_declaration
	|	named_type_specifier
	|	catch_label
	|	finally_label
	|	nested_scope_label
	;

//..............................................................................

import_declaration
	:	TokenKind_Import TokenKind_Literal
			{
				return m_module->m_importMgr.addImport ($2.m_data.m_string);
			}
	;

namespace_declaration
	:	TokenKind_Namespace qualified_name
			{
				return openGlobalNamespace ($2.m_name, $2.m_firstToken.m_pos) != NULL;
			}
		'{' global_declaration* '}'
			{
				m_module->m_namespaceMgr.closeNamespace ();
			}
	;

extension_declaration
	:	TokenKind_Extension TokenKind_Identifier ':' type_name
			{
				return openExtensionNamespace (
					$2.m_data.m_string,
					$4.m_type,
					$2.m_pos
					) != NULL;
			}
		'{' named_type_block_declaration* '}'
			{
				m_module->m_namespaceMgr.closeNamespace ();
			}
	;

using_declaration
	:	TokenKind_Using using_namespace_kind qualified_name_list ';'
			{
				return useNamespace ($3.m_nameList, $2.m_namespaceKind, $1.m_pos);
			}
	;

class
{
	NamespaceKind m_namespaceKind;
}
using_namespace_kind
	:	TokenKind_Namespace
			{
				$.m_namespaceKind = NamespaceKind_Global;
			}
	|	TokenKind_Extension
			{
				$.m_namespaceKind = NamespaceKind_Extension;
			}
	;

friend_declaration
	:	TokenKind_Friend qualified_name_list ';'
	;

access_declaration
	:	access_specifier ':'
			{
				m_module->m_namespaceMgr.m_currentAccessKind = $1.m_accessKind;
			}
	;

alignment_declaration
	:	TokenKind_Alignment '='? alignment_value ';'
	|	TokenKind_Alignment '(' alignment_value ')'
	;

alignment_value
	:	TokenKind_Integer
			{
				m_fieldAlignment = $1.m_data.m_integer;
			}
	|	TokenKind_Default
			{
				m_fieldAlignment = m_defaultFieldAlignment;
			}
	;

setas_declaration
	:	TokenKind_SetAs '='? setas_value ';'
	|	TokenKind_SetAs '(' setas_value ')'
	;

setas_value
	:	type_name
			{
				return setSetAsType ($1.m_type);
			}
	|	TokenKind_Default
			{
				return setSetAsType (NULL);
			}
	;

//..............................................................................

class
{
	QualifiedName m_name
}
qualified_name
	:	qualified_name_impl <&$.m_name>
	;

qualified_name_impl <QualifiedName* $name>
	:	TokenKind_Identifier
			{
				$name->addName ($1.m_data.m_string);
			}
		('.' TokenKind_Identifier $n2
			{
				$name->addName ($n2.m_data.m_string);
			}
		)*
	;

class
{
	sl::BoxList <QualifiedName> m_nameList;
}
qualified_name_list
	:	qualified_name
			{
				sl::BoxIterator <QualifiedName> it = $.m_nameList.insertTail ();
				it->takeOver (&$1.m_name);
			}
		(',' qualified_name
			{
				sl::BoxIterator <QualifiedName> it = $.m_nameList.insertTail ();
				it->takeOver (&$3.m_name);
			}
		)*
	;

//..............................................................................

// item declarations

start
normal_item_declaration
	enter
	{
		preDeclaration ();
	}
	:	item_declaration_w_specifier
	|	resolver (item_declaration_wo_specifier_rslv) priority (2) // set higher priority than type_specifier::qualified_name
		item_declaration_wo_specifier
	;

local_item_declaration
	enter
	{
		preDeclaration ();
	}
	:	item_declaration_w_specifier
	|	resolver ({ return false; }) priority (2) // set higher priority than type_specifier::qualified_name
		item_declaration_wo_specifier
	;

item_declaration_w_specifier
	:	declaration_specifier_list $s
		declarator_list <&$s.m_typeSpecifier>?
		declaration_terminator <&$s.m_typeSpecifier>
	;

item_declaration_wo_specifier
	local
	{
		Declarator $declarator;
	}
	enter
	{
		$declarator.setTypeSpecifier (NULL, m_module);
	}
	:	declarator_prefix <&$declarator>*
		declarator_name <&$declarator>
		function_suffix <&$declarator>
		declarator_suffix <&$declarator>*
			{
				return declare (&$declarator);
			}
		declaration_terminator <NULL>
	;

// conflict at TokenKind_Identifier in global scope and in named type block
// between qualified_type_name and declarator_name
// prefer declarator_name if and only if this is a function

item_declaration_wo_specifier_rslv
	local
	{
		Declarator $declarator; // dummy
	}
	:	declarator_qualifier <&$declarator>
		('.' declarator_qualifier <&$declarator>)*
		'(' // must be a function
	;

//..............................................................................

declaration_terminator <TypeSpecifier* $typeSpecifier>
	leave
	{
		if (m_attributeBlock)
		{
			err::setFormatStringError ("unused attribute block in declaration");
			return false;
		}
	}
	:	';'
			{
				return emptyDeclarationTerminator ($typeSpecifier);
			}
	|	declaration_body_pass1
			{
				return setDeclarationBody (&$1.m_tokenList);
			}
	;

class
{
	sl::BoxList <Token> m_tokenList;
}
declaration_body_pass1
	:	compound_stmt_pass1 <&$.m_tokenList>
	;

compound_stmt_pass1 <sl::BoxList <Token>* $tokenList>
	local
	{
		StmtPass1 $stmt;
	}
	:	'{'
			{
				addScopeAnchorToken (&$stmt, $1);
			}
		statement_pass1 <&$stmt>*
		'}' $r
			{
				$tokenList->insertListTail (&$stmt.m_tokenList);
				$tokenList->insertTail ($r);
			}
	;

noast
statement_pass1 <StmtPass1* $stmt>
	:	compound_stmt_pass1 <&(*$stmt).m_tokenList>
	|	TokenKind_Catch
			{
				$stmt->m_tokenList.insertTail ($1);
				$stmt->m_scopeAnchorToken->m_data.m_integer |= ScopeFlag_CatchAhead | ScopeFlag_HasCatch;
			}
	|	TokenKind_Finally
			{
				$stmt->m_tokenList.insertTail ($1);
				$stmt->m_scopeAnchorToken->m_data.m_integer |= ScopeFlag_FinallyAhead | ScopeFlag_Finalizable;
			}
	|	TokenKind_NestedScope
			{
				addScopeAnchorToken ($stmt, $1);
			}
	|	TokenKind_Case
			{
				addScopeAnchorToken ($stmt, $1);
			}
	|	TokenKind_Default
			{
				addScopeAnchorToken ($stmt, $1);
			}
	|	any
			{
				$stmt->m_tokenList.insertTail ($1);
			}
	;

//..............................................................................

// type names

type_name_impl <Type** $type, Value* $countValue>
	local
	{
		Declarator $declarator;
	}
	:	type_specifier_modifier_list
			{
				$declarator.setTypeSpecifier (&$1.m_typeSpecifier, m_module);
			}
		declarator_prefix <&$declarator>*
		declarator_suffix <&$declarator>*
			{
				Type* type = $declarator.calcType ($countValue);
				if (!type)
					return false;

				*$type = type;
			}
	;

class
{
	Type* m_type;
}
type_name
	: type_name_impl <&$.m_type, NULL>
	;

class
{
	sl::BoxList <Type*> m_typeList;
}
type_name_list
	:	type_name
			{
				$.m_typeList.insertTail ($1.m_type);
			}
		(',' type_name $t2
			{
				$.m_typeList.insertTail ($t2.m_type);
			}
		)*
	;

//..............................................................................

// attributes

attribute_block
	:	'['
			{
				if (m_attributeBlock)
				{
					err::setError ("attribute block redefinition");
					return false;
				}

				m_attributeBlock = m_module->m_attributeMgr.createAttributeBlock ();
			}
		attribute_declarator (',' attribute_declarator)*
		']'
	;

nullable
attribute_declarator
	:	TokenKind_Identifier ('=' expression_pass1 $i)?
			{
				Attribute* attribute = m_attributeBlock->createAttribute (
					$1.m_data.m_string,
					&$i ? &$i.m_tokenList : NULL
					);

				if (!attribute)
					return false;

				attribute->m_pos = $1.m_pos;
			}
	|	epsilon
	;

//..............................................................................
